name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: false
        default: 'manual-build'

permissions:
  contents: write
  pull-requests: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build test
        run: go build -v ./cmd/main.go

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            ext: .exe
          - goos: windows  
            goarch: arm64
            ext: .exe
          - goos: darwin
            goarch: amd64
            ext: ''
          - goos: darwin
            goarch: arm64  
            ext: ''
          - goos: linux
            goarch: amd64
            ext: ''
          - goos: linux
            goarch: arm64
            ext: ''

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Get dependencies
        run: go mod download

      - name: Set version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="dev-${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="srt2fcpxml-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
          go build -ldflags="-s -w -X 'main.version=${{ steps.version.outputs.version }}'" -o "$BINARY_NAME" ./cmd/main.go
          echo "Built: $BINARY_NAME"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: srt2fcpxml-${{ matrix.goos }}-${{ matrix.goarch }}
          path: srt2fcpxml-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f -exec cp {} release/ \;
          cd release
          for file in *; do
            if [[ $file == *"windows"* ]]; then
              chmod +x "$file"
            else
              chmod +x "$file"
            fi
          done
          ls -la

      - name: Generate checksums
        run: |
          cd release
          sha256sum * > SHA256SUMS
          cat SHA256SUMS

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: srt2fcpxml ${{ github.ref_name }}
          body: |
            ## srt2fcpxml ${{ github.ref_name }}
            
            Convert SRT subtitle files to Final Cut Pro XML format with flexible resolution and frame rate options.
            
            ### New Features
            - üéØ Automatic SRT file detection in current directory
            - ‚öôÔ∏è Flexible command line arguments for resolution and frame rate  
            - üé¨ Support for multiple frame rates: 23.98, 24, 25, 29.97, 30, 50, 59.94, 60
            - üì¶ Updated dependencies to latest versions
            - üîÑ Improved output format and error handling
            
            ### Usage
            ```bash
            # Auto find SRT file with default settings (1920x1080@30fps)
            ./srt2fcpxml
            
            # Use specific frame rate (1920x1080@60fps)  
            ./srt2fcpxml 60
            
            # Use custom resolution and frame rate
            ./srt2fcpxml 1920 1080 29.97
            
            # Show version
            ./srt2fcpxml --version
            ```
            
            ### Supported Platforms
            - ‚úÖ Windows (AMD64, ARM64)
            - ‚úÖ macOS (Intel, Apple Silicon) 
            - ‚úÖ Linux (AMD64, ARM64)
            
            ### Installation
            1. Download the appropriate binary for your platform
            2. Make it executable: `chmod +x srt2fcpxml-*`
            3. Run it in a directory containing SRT files
            
            ### Checksums
            SHA256 checksums are provided in `SHA256SUMS` file.
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
